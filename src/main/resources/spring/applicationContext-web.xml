<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <aop:aspectj-autoproxy/>

    <!--Looks for annotations on beans in the same application context it is defined and declares support for
    all the general annotations like @Autowired, @Resource, @Required, @PostConstruct etc etc.
    <context:annotation-config> does NOT search for @Component, @Controller, etc.
    <context:component-scan> DOES search for those @Component annotations,
    as well as the annotations that <context:annotation-config/> does.
    there are other "annotation-driven" tags available to provide additional functionality in other Spring modules.
    For example, <transaction:annotation-driven /> enables the use of the @Transaction annotation,
    <task:annotation-driven /> is required for @Scheduled et al-->
    <context:annotation-config/>

    <context:component-scan base-package="toy.aspect"/>
    <context:component-scan base-package="toy.anno"/>
    <context:component-scan base-package="cache"/>

    <context:property-placeholder location="classpath:config/*.properties"/>

</beans>